package repository;

import dto.*;
import entity.Carrera;
import entity.CarreraEstudiante;
import entity.Estudiante;
import javax.persistence.*;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class CarreraRepositoryImpl implements CarreraRepository {

    private final EntityManager em;

    public CarreraRepositoryImpl () {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("Integrador2");
        this.em = emf.createEntityManager();
    }

    /**
        Carrera has an id autogenerated, so maybe we would never use this method
     */
    @Override
    public Carrera findById ( int idCarrera ) {
        String query = "SELECT c FROM Carrera c WHERE c.id_carrera = :id";
        Query q = this.em.createQuery( query );
        q.setParameter( "id", idCarrera );
        Carrera c = ( Carrera ) q.getSingleResult();
        return c;
    }

    /**
     * Carrera has an unique name, so this method is better than the one above
     * @param name
     * @return carrera, if exists any with that name, else it will throw an exception
     */
    @Override
    public Carrera findByName( String name ) {
        String query = "SELECT c FROM Carrera c WHERE c.nombre = :nombre";
        Query q = this.em.createQuery( query );
        q.setParameter( "nombre", name );
        Carrera c = ( Carrera ) q.getSingleResult();
        return c;
    }

    @Override
    public void save( Carrera carrera ) {
        em.getTransaction().begin();
        this.em.persist( carrera );
        em.getTransaction().commit();
    }

    @Override
    public void update(Carrera c) {
        em.getTransaction().begin();
        this.em.merge( c );
        em.getTransaction().commit();
    }

    @Override
    public List<Carrera> findAll() {
        em.getTransaction().begin();
        String jpql = "SELECT c FROM Carrera c";
        Query q = this.em.createQuery( jpql );
        List<Carrera> carreras = q.getResultList();
        em.getTransaction().commit();
        return carreras;
    }

    @Override
    public List<CarreraDto> findAllByInscriptosOrderByCount() {
        this.em.getTransaction().begin();
        String sql = """
                SELECT new CarreraDto( c.id_carrera, c.nombre, count(*) )
                FROM Carrera c 
                JOIN CarreraEstudiante ce 
                ON c.id_carrera = ce.carrera.id_carrera
                GROUP BY c.id_carrera, c.nombre
                ORDER BY 3 DESC
                """.trim();
        Query q = this.em.createQuery(sql, CarreraDto.class);
        List<CarreraDto> carreraDto = q.getResultList();
        em.getTransaction().commit();
        return carreraDto;
    }

    @Override
    public void addStudent (Carrera c, Estudiante e, LocalDate fechaIngreso, LocalDate fechaEgreso ) {
        c.addStudent(new CarreraEstudiante(c, e, fechaIngreso, fechaEgreso));
    }

    @Override
    public void removeStudent ( Carrera c, Estudiante e ) {
        c.removeStudent( new CarreraEstudiante( c, e, null,null));
    }

    /**
     * To house Gaston ahahaha
     * @return
     */
    @Override
    public List<CarreraReportDto> report() {
        this.em.getTransaction().begin();
        String query = """ 
                select c.id_carrera, c.nombre ,
                        year(fechaIngreso) as añoIngreso, year(fechaEgreso) as añoEgreso,
                        count(idEstudiante) OVER (wIngresos) as ingresos,
                        count(idEstudiante) OVER (PARTITION BY c.id_carrera,year(fechaEgreso)) as egresos  
                    from carrera c join carrera_estudiante  ce on c.id_carrera = ce.idCarrera
                WINDOW wIngresos AS (PARTITION BY c.id_carrera,year(fechaIngreso))
                ORDER BY c.nombre,year(fechaIngreso), year(fechaEgreso)  """.trim();
        Query q = this.em.createNativeQuery( query);
        List<Object[]> report = q.getResultList();
        ArrayList<CarreraReportDto> carreraReport = this.mapper( report );
        this.em.getTransaction().commit();
        return carreraReport;
    }

    private ArrayList<CarreraReportDto> mapper(List<Object[]> report) {
        ArrayList<CarreraReportDto> carreraReport = new ArrayList<>();
        CarreraReportDto cr ;
        for ( Object[] o : report ) {
            carreraReport.add( new CarreraReportDto( (int)o[0], (String) o[1],
                        (int) o[2], (int) o[3],
                    (BigInteger) o[4], (BigInteger) o[5] ) );
        }
        return carreraReport;
    }

}
